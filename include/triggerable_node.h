#ifndef _TRIGGERABLE_NODE_H
#define _TRIGGERABLE_NODE_H

#include "std_msgs/UInt32.h"

#include "sdk_node.h"

namespace Numurus 
{

/**
 * @brief      Represents an SDK node that can be triggered via FPGA trigger infrastructure
 */
class TriggerableNode : public SDKNode
{
public:
	/**
	 * @brief      Constructor
	 *
	 * @param[in]  name                 The name of the SDK node
	 * @param[in]  trig_mask_reg_addr   The trigger mask register address (typically a named constant from num_fpga.h)
	 * @param[in]  trig_delay_reg_addr  The trigger delay register address (typically a named constant from num_fpga.h)
	 */
	TriggerableNode(const std::string name, reg_addr_t trig_mask_reg_addr, reg_addr_t trig_delay_reg_addr);
	~TriggerableNode();

protected:
	/**
	 * @brief      Initialize parameters, including the intial values for the trigger mask and delay.
	 * 
	 * 			   Overrides the SDKNode::init() method, which must be called, so implementation calls back to the base class
	 * 			   method. Any direct subclasses should call back to this init() method as part of their own init() override.
	 */
	virtual void init() override;

private:
	/**
	 * @brief      Sets the input trigger mask value.
	 * 
	 * 			   This method serves as the callback for the (private namespace) set_trig_mask topic. The trigger mask establishes
	 * 			   which software trigger input values (generated by the trigger manager in response to ROS messages) will cause this
	 * 			   node's trigger event to occur.
	 *
	 * @param[in]  trig_mask_val  The trigger mask value to set
	 */	
	void setTrigMask(const std_msgs::UInt32::ConstPtr& trig_mask_val);

	/**
	 * @brief      Sets the input trigger delay value (in usecs).
	 * 
	 * 			   This method serves as the callback for the (private namespace) set_trig_delay topic
	 *
	 * @param[in]  trig_delay_val_usecs  The trigger delay value to set
	 */	
	void setTrigDelay(const std_msgs::UInt32::ConstPtr& trig_delay_val_usecs);

	/**
	 * Interface to the input trigger mask register for this node
	 */
	Register trig_mask;

	/**
	 * Interface to the input trigger delay register for this node
	 */
	Register trig_delay;
};

} // namespace Numurus
#endif