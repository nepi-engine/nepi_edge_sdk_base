<launch>
  <arg name="global_ns" value="$(env ROOTNAME)" />
  <arg name="device_ns" value="$(env ROOTNAME)/$(env DEVICE_ID)" />
  <arg name="output_destination" value="screen" />
  <arg name="config_file_root" value="/opt/nepi/ros/etc" />
  <arg name="partition_layout_file" default="s2x_xavier_nx_nepi_partition_layout.yaml" />
  <arg name="nepi_edge_sdk_link_libpath" value="/opt/nepi/nepi_link/nepi_edge_sdk_link/lib" />

  <!-- Args. to run or not run specific nodes -->
  <arg name="run_robot_state_publisher" default="false" />
  <arg name="run_web_utils" default="true" />
  <arg name="run_darknet_ros_mgr" default="true" />
  <arg name="run_target_localizer" default="false" />
  <arg name="run_nepi_link" default="true" />
  <arg name="run_nav_pose" default="true" />
  <arg name="run_nepi_autolauncher" default="true" />
  <arg name="run_idx_sensor_mgr" default="true" />
  <arg name="run_automation_mgr" default="true" />
  <arg name="run_sequential_image_mux" default="true" />
  <arg name="run_onvif_mgr" default="true" />
  <arg name="run_sealite_lsx_discovery" default="true" />
      
  <!-- Everything lives in the device namespace -->
  <group ns="$(arg device_ns)">
    <node name="config_mgr" pkg="nepi_edge_sdk_base" type="config_mgr.py" respawn="true" output="$(arg output_destination)" />

    <rosparam command="load" file="$(arg config_file_root)/system_mgr/system_mgr.yaml" ns="system_mgr" />
    <!-- Partition layout depends on system type. Should be passed in from specialized launch file -->
    <rosparam command="load" file="$(arg config_file_root)/system_mgr/$(arg partition_layout_file)" ns="system_mgr" />
    <node name="system_mgr" pkg="nepi_edge_sdk_base" type="system_mgr.py" respawn="true" output="$(arg output_destination)" />

    <rosparam command="load" file="$(arg config_file_root)/time_sync_mgr/time_sync_mgr.yaml" ns="time_sync_mgr" />
    <node name="time_sync_mgr" pkg="nepi_edge_sdk_base" type="time_sync_mgr.py" respawn="true" output="$(arg output_destination)" />

    <rosparam command="load" file="$(arg config_file_root)/network_mgr/network_mgr.yaml" ns="network_mgr" />
    <node name="network_mgr" pkg="nepi_edge_sdk_base" type="network_mgr.py" respawn="true" output="$(arg output_destination)" />

    <rosparam command="load" file="$(arg config_file_root)/trigger_mgr/trigger_mgr.yaml" ns="trigger_mgr" />
    <node name="trigger_mgr" pkg="nepi_edge_sdk_base" type="trigger_mgr_no_hardware" respawn="true" output="$(arg output_destination)" />

    <node if="$(arg run_robot_state_publisher)" name="nepi_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen" required="true" />

    <group if="$(arg run_web_utils)" >
      <!-- Rosbridge_websocket (for RUI or stand-alone)-->
      <include file="$(find rosbridge_server)/launch/rosbridge_websocket.launch" >
        <arg name="address" value="0.0.0.0"/>
        <arg name="port" value="9090"/>
        <!-- Use a long unregister_timeout as a work-around for the well-known unregister rospy bug -->
        <arg name="unregister_timeout" value="31536000"/>
      </include>

      <!-- Web Video Server (for RUI or stand-alone) -->
      <node name="web_video_server" pkg="web_video_server" type="web_video_server" output="$(arg output_destination)">
        <param name="port" value="9091"/>
      </node>
    </group>

    <!-- Sequential Image Mux -->
    <group if="$(arg run_sequential_image_mux)" >
      <rosparam command="load" file="$(arg config_file_root)/sequential_image_mux/sequential_image_mux.yaml" ns="sequential_image_mux" />
      <node name="sequential_image_mux" pkg="nepi_edge_sdk_base" type="sequential_image_mux.py" respawn="true" output="$(arg output_destination)" />
    </group>

    <!-- NEPI Darknet Mgr -->
    <group if="$(arg run_darknet_ros_mgr)" >
      <rosparam command="load" file="$(arg config_file_root)/nepi_darknet_ros_mgr/nepi_darknet_ros_mgr.yaml" ns="nepi_darknet_ros_mgr" />
      <node name="nepi_darknet_ros_mgr" pkg="nepi_darknet_ros" type="nepi_darknet_ros_mgr.py" respawn="true" output="$(arg output_destination)" />
    </group>

    <!-- NEPI Target Localizer -->
    <group if="$(arg run_target_localizer)" >
      <rosparam command="load" file="$(arg config_file_root)/target_localizer/target_localizer.yaml" ns="target_localizer" />
      <node name="target_localizer" pkg="nepi_edge_sdk_ai" type="target_localizer" respawn="true" output="$(arg output_destination)" />
    </group>

    <!-- NEPI Link (NEPI-Bot via nepi_link_ros_bridge) -->
    <group if="$(arg run_nepi_link)" >
      <rosparam command="load" file="$(arg config_file_root)/nepi_link_ros_bridge/nepi_link_ros_bridge.yaml" ns="nepi_link_ros_bridge" />
      <node name="nepi_link_ros_bridge" pkg="nepi_link_ros_bridge" type="nepi_link_ros_bridge.py" respawn="true" output="$(arg output_destination)" >
        <!-- To use the nepi_edge_sdk_link components, must update the LD_LIBRARY_PATH and PYTHONPATH as described in that package's README -->
        <env name="LD_LIBRARY_PATH" value="$(env LD_LIBRARY_PATH):$(arg nepi_edge_sdk_link_libpath)" />
        <env name="PYTHONPATH" value="$(arg nepi_edge_sdk_link_libpath):$(env PYTHONPATH)" />
      </node>
    </group>

    <!-- NEPI Nav/Pose -->
    <group if="$(arg run_nav_pose)" >
      <!-- Nav/Pose Mgr -->
      <rosparam command="load" file="$(arg config_file_root)/nav_pose_mgr/nav_pose_mgr.yaml" ns="nav_pose_mgr" />
      <node name="nav_pose_mgr" pkg="nepi_edge_sdk_nav_pose" type="nav_pose_mgr_node" respawn="true" output="$(arg output_destination)" />

      <!-- GPSD ROS Client -->
      <rosparam command="load" file="$(arg config_file_root)/gpsd_ros_client/gpsd_ros_client.yaml" ns="gpsd_ros_client" />
      <node name="gpsd_ros_client" pkg="nepi_edge_sdk_nav_pose" type="gpsd_ros_client_node" respawn="true" output="$(arg output_destination)" />
    </group>

    <group if="$(arg run_nepi_autolauncher)" >
      <rosparam command="load" file="$(arg config_file_root)/nepi_autolauncher/nepi_autolauncher.yaml" ns="nepi_autolauncher" />
      <node name="nepi_autolauncher" pkg="nepi_edge_sdk_base" type="nepi_autolauncher.py" respawn="true" output="$(arg output_destination)" />
    </group>

    <!-- IDX Sensor Manager -->
    <group if="$(arg run_idx_sensor_mgr)" >
      <rosparam command="load" file="$(arg config_file_root)/idx_sensor_mgr/idx_sensor_mgr.yaml" ns="idx_sensor_mgr" />
      <node name="idx_sensor_mgr" pkg="nepi_edge_sdk_base" type="idx_sensor_mgr.py" respawn="true" output="$(arg output_destination)" />
    </group>

    <!-- OVIF Manager (IDX and PTX) -->
    <group if="$(arg run_onvif_mgr)" >
      <rosparam command="load" file="$(arg config_file_root)/onvif_mgr/onvif_mgr.yaml" ns="onvif_mgr" />
      <node name="onvif_mgr" pkg="nepi_edge_sdk_onvif" type="onvif_mgr.py" respawn="true" output="$(arg output_destination)" />
    </group>

    <!-- Sealite Auto Discovery: will migrate to nepi_autolauncher eventually -->
    
    <group if="$(arg run_sealite_lsx_discovery)" >
      <!-- No config file for this node at present -->
      <node name="sealite_lsx_detector" pkg="nepi_edge_sdk_lsx" type="sealite_lsx_auto_discovery_script.py" respawn="true" output="$(arg output_destination)" />
    </group>

    <!-- Automation Mgr -->
    <group if="$(arg run_automation_mgr)" >
      <rosparam command="load" file="$(arg config_file_root)/automation_mgr/automation_mgr.yaml" ns="automation_mgr" />
      <node name="automation_mgr" pkg="nepi_automation_mgr" type="automation_manager.py" respawn="true" output="$(arg output_destination)" />
    </group>

  </group>

</launch>
