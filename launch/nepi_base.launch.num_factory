<launch>
  <arg name="global_ns" value="$(env ROOTNAME)" />
  <arg name="device_ns" value="$(env ROOTNAME)/$(env DEVICE_ID)" />
  <arg name="output_destination" value="screen" />
  <arg name="config_file_root" value="/opt/nepi/ros/etc" />
  <arg name="partition_layout_file" default="s2x_xavier_nx_nepi_partition_layout.yaml" />

  <!-- Args. to run or not run specific nodes -->
  <arg name="run_robot_state_publisher" default="false" />
  <arg name="run_web_utils" default="true" />

  <arg name="run_mgr_ai_detector" default="true" />
  <arg name="run_mgr_nav_pose" default="true" />
  <arg name="run_mgr_drivers" default="true" />
  <arg name="run_mgr_onvif" default="true" />
  <arg name="run_mgr_automation" default="true" />

  <arg name="run_app_ai_targeting" default="true" />
  <arg name="run_app_pointcloud_viewer" default="true" />
  <arg name="run_app_nav_pose_publisher" default="true" />
  <arg name="run_app_image_sequencer" default="true" />

        
  <!-- Everything lives in the device namespace -->
  <group ns="$(arg device_ns)">
    <node name="config_mgr" pkg="nepi_managers" type="config_mgr.py" respawn="true" output="$(arg output_destination)" />

    <rosparam command="load" file="$(arg config_file_root)/system_mgr/system_mgr.yaml" ns="system_mgr" />
    <!-- Partition layout depends on system type. Should be passed in from specialized launch file -->
    <rosparam command="load" file="$(arg config_file_root)/system_mgr/$(arg partition_layout_file)" ns="system_mgr" />
    <node name="system_mgr" pkg="nepi_managers" type="system_mgr.py" respawn="true" output="$(arg output_destination)" />

    <rosparam command="load" file="$(arg config_file_root)/time_sync_mgr/time_sync_mgr.yaml" ns="time_sync_mgr" />
    <node name="time_sync_mgr" pkg="nepi_managers" type="time_sync_mgr.py" respawn="true" output="$(arg output_destination)" />

    <rosparam command="load" file="$(arg config_file_root)/network_mgr/network_mgr.yaml" ns="network_mgr" />
    <node name="network_mgr" pkg="nepi_managers" type="network_mgr.py" respawn="true" output="$(arg output_destination)" />

    <node if="$(arg run_robot_state_publisher)" name="nepi_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen" required="true" />

    <group if="$(arg run_web_utils)" >
      <!-- Rosbridge_websocket (for RUI or stand-alone)-->
      <include file="$(find rosbridge_server)/launch/rosbridge_websocket.launch" >
        <arg name="address" value="0.0.0.0"/>
        <arg name="port" value="9090"/>
        <!-- Use a long unregister_timeout as a work-around for the well-known unregister rospy bug -->
        <arg name="unregister_timeout" value="31536000"/>
      </include>

      <!-- Web Video Server (for RUI or stand-alone) -->
      <node name="web_video_server" pkg="web_video_server" type="web_video_server" output="$(arg output_destination)">
        <param name="port" value="9091"/>
      </node>
    </group>


    <!-- MGR:  Nav/Pose -->
    <group if="$(arg run_mgr_nav_pose)" >
      <!-- Nav/Pose Mgr -->
      <rosparam command="load" file="$(arg config_file_root)/nav_pose_mgr/nav_pose_mgr.yaml" ns="nav_pose_mgr" />
      <node name="nav_pose_mgr" pkg="nepi_managers" type="nav_pose_mgr" respawn="true" output="$(arg output_destination)" />
    </group>      

   <!-- MGR: Drivers -->
    <group if="$(arg run_mgr_drivers)" >
      <rosparam command="load" file="$(arg config_file_root)/drivers_mgr/drivers_mgr.yaml" ns="drivers_mgr" />
      <node name="drivers_mgr" pkg="nepi_managers" type="drivers_mgr.py" respawn="true" output="$(arg output_destination)" />
    </group>


    <!-- MGR: OVIF (IDX and PTX) -->
    <group if="$(arg run_mgr_onvif)" >
      <rosparam command="load" file="$(arg config_file_root)/onvif_mgr/onvif_mgr.yaml" ns="onvif_mgr" />
      <node name="onvif_mgr" pkg="nepi_managers" type="onvif_mgr.py" respawn="true" output="$(arg output_destination)" />
    </group>

    <!-- MGR: AI Detector Mgr -->
    <group if="$(arg run_mgr_ai_detector)" >
      <rosparam command="load" file="$(arg config_file_root)/ai_detector_mgr/ai_detector_mgr.yaml" ns="ai_detector_mgr" />
      <node name="ai_detector_mgr" pkg="nepi_managers" type="ai_detector_mgr.py" respawn="true" output="$(arg output_destination)" />
    </group>

       <!-- MGR: Automation -->
    <group if="$(arg run_mgr_automation)" >
      <rosparam command="load" file="$(arg config_file_root)/automation_mgr/automation_mgr.yaml" ns="automation_mgr" />
      <node name="automation_mgr" pkg="nepi_managers" type="automation_mgr.py" respawn="true" output="$(arg output_destination)" />
    </group>




    <!-- APP: AI Targeting-->
    <group if="$(arg run_app_ai_targeting)" >
      <rosparam command="load" file="$(arg config_file_root)/app_ai_targeting/app_ai_targeting.yaml" ns="app_ai_targeting" />
      <node name="app_ai_targeting" pkg="nepi_app_ai_targeting" type="ai_targeting_app_node.py" respawn="true" output="$(arg output_destination)" />
    </group>


    <!-- APP: Pointcloud Viewer -->
    <group if="$(arg run_app_pointcloud_viewer)" >
      <rosparam command="load" file="$(arg config_file_root)/app_pointcloud/app_pointcloud.yaml" ns="app_pointcloud" />
      <node name="app_pointcloud" pkg="nepi_app_pointcloud" type="pointcloud_app_node.py" respawn="true" output="$(arg output_destination)" />
    </group>

    <!-- APP: Nav Pose Publisher-->
    <group if="$(arg run_app_nav_pose_publisher)" >
      <rosparam command="load" file="$(arg config_file_root)/app_nav_pose_publisher/nav_pose_publisher.yaml" ns="nav_pose_publisher" />
      <node name="nav_pose_publisher" pkg="nepi_app_navpose_publisher" type="nav_pose_publisher.py" respawn="true" output="$(arg output_destination)" />
    </group>


    <!-- APP: Image Sequencer -->
    <group if="$(arg run_app_image_sequencer)" >
      <rosparam command="load" file="$(arg config_file_root)/app_image_sequencer/app_image_sequencer.yaml" ns="sequential_image_mux" />
      <node name="sequential_image_mux" pkg="nepi_app_image_sequencer" type="sequential_image_mux.py" respawn="true" output="$(arg output_destination)" />
    </group>

  </group>

</launch>
